generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

/// ========================
/// NEW: теги и join-таблица
/// ========================
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Tag {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  opredLinks OpredTag[]

  @@map("tags")
}

model OpredTag {
  opredId BigInt
  tagId   Int
  addedBy String?  @db.VarChar(64)
  addedAt DateTime @default(now())
  opred   opred_v  @relation(fields: [opredId], references: [id], onDelete: Cascade)
  tag     Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([opredId, tagId])
  @@index([tagId])
  @@map("opred_tags")
}

/// ========================
/// UPDATED: word_v
/// ========================
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model word_v {
  id         BigInt         @id @default(autoincrement())
  word_text  String         @db.VarChar(255)
  length     Int            @db.SmallInt
  file_id    BigInt         @default(-1)
  user_add   String         @default("system") @db.VarChar(255)
  create_at  DateTime?      @db.Timestamp(6)
  using      Int            @default(1) @db.SmallInt
  korny      String
  data_set   DateTime?      @db.Timestamp(6)
  user_set   String         @default("") @db.VarChar(255)
  go_flag    Int            @default(0) @db.SmallInt
  is_deleted Boolean        @default(false)
  langId     Int
  opred_v    opred_v[]
  pendings   PendingWords[]
  language   language       @relation(fields: [langId], references: [id])

  @@index([is_deleted])
  @@map("word_v")
}

model PendingWords {
  id           BigInt                @id @default(autoincrement())
  word_text    String                @db.VarChar(255)
  length       Int                   @db.SmallInt
  langId       Int
  createdAt    DateTime              @default(now())
  is_deleted   Boolean               @default(false)
  note         String                @db.VarChar(512)
  updatedAt    DateTime              @updatedAt
  status       PendingStatus         @default(PENDING)
  targetWordId BigInt?
  descriptions PendingDescriptions[]
  language     language              @relation(fields: [langId], references: [id])
  targetWord   word_v?               @relation(fields: [targetWordId], references: [id])

  @@index([targetWordId])
  @@index([langId, word_text])
  @@map("pending_words")
}

model PendingDescriptions {
  id              BigInt        @id @default(autoincrement())
  pendingWordId   BigInt
  description     String        @db.VarChar(1024)
  note            String        @db.VarChar(512)
  status          PendingStatus @default(PENDING)
  is_deleted      Boolean       @default(false)
  approvedOpredId BigInt?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  langId          Int           @default(3)
  difficulty      Int           @default(1) @db.SmallInt
  approvedOpred   opred_v?      @relation(fields: [approvedOpredId], references: [id])
  pendingWord     PendingWords  @relation(fields: [pendingWordId], references: [id], onDelete: Cascade)

  @@index([pendingWordId])
  @@map("pending_descriptions")
}

/// ========================
/// UPDATED: opred_v
/// ========================
model opred_v {
  id         BigInt                @id @default(autoincrement())
  word_id    BigInt                @default(-1)
  text_opr   String                @default("") @db.VarChar(255)
  length     Int?                  @db.SmallInt
  end_date   DateTime?             @db.Timestamp(6)
  tema       BigInt                @default(0)
  difficulty Int                   @default(1) @db.SmallInt
  id_file    BigInt                @default(-1)
  use        Int                   @default(1) @db.SmallInt
  user_add   String                @default("") @db.VarChar(32)
  create_at  DateTime?             @db.Timestamp(6)
  edit_user  String                @default("") @db.VarChar(32)
  update_at  DateTime?             @db.Timestamp(6)
  coment     String                @default("") @db.VarChar(512)
  set_reg    BigInt                @default(3)
  data_set   DateTime?             @db.Timestamp(6)
  user_set   String                @default("") @db.VarChar(255)
  go_flag    Int                   @default(0) @db.SmallInt
  is_deleted Boolean               @default(false)
  langId     Int
  tags       OpredTag[]
  language   language              @relation(fields: [langId], references: [id])
  word_v     word_v                @relation(fields: [word_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "word_fkey")
  pendings   PendingDescriptions[]

  @@index([word_id, is_deleted])
  @@map("opred_v")
}

/// ========================
/// UNCHANGED STRUCTURALLY (RENAMED MODEL)
/// ========================
model LegacyUser {
  id       BigInt    @id @default(autoincrement())
  name     String    @db.VarChar(255)
  password String    @db.VarChar(9)
  menu     String    @default("menu_admin") @db.VarChar(255)
  fio      String    @db.VarChar(255)
  pamd     String    @db.VarChar(64)
  end_free DateTime? @db.Date

  @@map("user")
}

model jp_img {
  id         BigInt    @id @default(autoincrement())
  w          BigInt
  h          BigInt
  livel      BigInt    @default(3)
  t_8x8      String
  t_16x16    String
  sorc       Bytes
  use_number String
  tags       String
  add_date   DateTime? @db.Date
  add_user   String    @default("") @db.VarChar(256)

  @@map("jp_img")
}

model log_coment {
  id          BigInt    @id @default(autoincrement())
  user        String    @default("") @db.VarChar(64)
  id_opr      BigInt
  text_coment String    @default("") @db.VarChar(256)
  add_data    DateTime? @db.Date

  @@index([id_opr])
  @@map("log_coment")
}

model shablons {
  id       BigInt @id @default(autoincrement())
  w        BigInt @default(0)
  h        BigInt @default(0)
  mask     String
  foto     BigInt @default(0)
  bin_data Bytes

  @@map("shablons")
}

model User {
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  passwordHash  String?   @db.VarChar(60)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  id            Int       @id @default(autoincrement())
  accounts      Account[]
  sessions      Session[]

  @@map("auth_users")
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  id                Int     @id @default(autoincrement())
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("auth_verification_tokens")
}

model language {
  id        Int            @id(map: "Language_pkey") @default(autoincrement())
  code      String         @unique(map: "Language_code_key") @db.VarChar(8)
  name      String         @db.VarChar(64)
  createdAt DateTime       @default(now())
  updatedAt DateTime
  opreds    opred_v[]
  pending   PendingWords[]
  words     word_v[]
}

enum PendingStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  MANAGER
  USER
}
